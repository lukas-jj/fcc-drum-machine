{"version":3,"sources":["App.js","Header.js","serviceWorker.js","index.js"],"names":["audioSamples","bank1","q","Audio","w","e","a","s","d","bank2","bank","changeBank","colorChange","setTimeout","document","getElementById","key","style","color","backgroundColor","border","background","handleClick","target","id","load","play","addEventListener","App","className","class","onClick","Header","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2NAEMA,G,KAAe,CACnBC,MAAO,CACLC,EAAG,IAAIC,MAAM,yGACbC,EAAG,IAAID,MAAM,yDACbE,EAAG,IAAIF,MAAM,8GACbG,EAAG,IAAIH,MAAM,0GACbI,EAAG,IAAIJ,MAAM,gDACbK,EAAG,IAAIL,MAAM,8DAEfM,MAAO,CACLP,EAAG,IAAIC,MAAM,4DACbC,EAAG,IAAID,MAAM,gDACbE,EAAG,IAAIF,MAAM,8CACbG,EAAG,IAAIH,MAAM,0GACbI,EAAG,IAAIJ,MAAM,gDACbK,EAAG,IAAIL,MAAM,gEAIbO,GAAO,EAIX,SAASC,IAELD,GADEA,EAgCN,SAASE,EAAYP,GACnBQ,YAAW,WACTC,SAASC,eAAeV,EAAEW,KAAKC,MAAMC,MAAQ,KAC7CJ,SAASC,eAAeV,EAAEW,KAAKC,MAAME,gBAAkB,KACvDL,SAASC,eAAeV,EAAEW,KAAKC,MAAMG,OAAS,KAC9CN,SAASC,eAAeV,EAAEW,KAAKC,MAAMI,WAAa,OACjD,KACHP,SAASC,eAAeV,EAAEW,KAAKC,MAAMI,WAAa,iCAClDP,SAASC,eAAeV,EAAEW,KAAKC,MAAME,gBAAkB,MAKzD,SAASG,EAAYjB,GACfK,GACFV,EAAaC,MAAMI,EAAEkB,OAAOC,IAAIC,OAChCzB,EAAaC,MAAMI,EAAEkB,OAAOC,IAAIE,SAGhC1B,EAAaS,MAAMJ,EAAEkB,OAAOC,IAAIC,OAChCzB,EAAaS,MAAMJ,EAAEkB,OAAOC,IAAIE,QAxCpCZ,SAASa,iBAAiB,WAC1B,SAAoBtB,GAEdK,GAAQV,EAAaC,MAAMI,EAAEW,MAC/BhB,EAAaC,MAAMI,EAAEW,KAAKS,OAC1BzB,EAAaC,MAAMI,EAAEW,KAAKU,OAC1Bd,EAAYP,IAELL,EAAaS,MAAMJ,EAAEW,MAC5BhB,EAAaS,MAAMJ,EAAEW,KAAKS,OAC1BzB,EAAaS,MAAMJ,EAAEW,KAAKU,OAC1Bd,EAAYP,IAGK,MAAVA,EAAEW,MACTL,IACAC,EAAYP,OA+CDuB,MAnBf,WAEE,OACE,yBAAKJ,GAAG,cACN,yBAAKA,GAAG,cAAcK,UAAU,QAC9B,4BAAQL,GAAG,IAAIM,MAAM,SAASC,QAAST,GAAvC,KACA,4BAAQE,GAAG,IAAIM,MAAM,SAASC,QAAST,GAAvC,KACA,4BAAQE,GAAG,IAAIM,MAAM,SAASC,QAAST,GAAvC,MAEF,yBAAKO,UAAU,QAAf,IAAuB,4BAAQL,GAAG,IAAIM,MAAM,SAASC,QAAST,GAAvC,KACrB,4BAAQE,GAAG,IAAIM,MAAM,SAASC,QAAST,GAAvC,KACA,4BAAQE,GAAG,IAAIM,MAAM,SAASC,QAAST,GAAvC,MACF,6BACE,4BAAQE,GAAG,IAAIM,MAAM,OAAOC,QAASpB,GAArC,sBACN,4BA9DKD,EAAO,QAAW,aCvBVsB,MARf,WACE,OACE,yBAAKR,GAAG,UACN,iDCMcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF1B,SAASC,eAAe,SDuHpB,kBAAmB0B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.baa28b9f.chunk.js","sourcesContent":["import React from 'react';\n\nconst audioSamples = {\n  bank1: {\n    q: new Audio(\"http://dight310.byu.edu/media/audio/FreeLoops.com/3/3/Free%20Kick%20Sample%208-900-Free-Loops.com.mp3\"),\n    w: new Audio(\"http://www.denhaku.com/r_box/sr16/sr16sd/alloysnr.wav\"),\n    e: new Audio(\"http://dight310.byu.edu/media/audio/FreeLoops.com/5/5/Long%20Open%20Hi%20Hat%20002-1653-Free-Loops.com.mp3\"),\n    a: new Audio(\"http://dight310.byu.edu/media/audio/FreeLoops.com/4/4/Korg%20Ride%20Cymbal%202-2526-Free-Loops.com.mp3\"),\n    s: new Audio(\"http://electrongate.com/dmxfiles/DXCRASH.wav\"),\n    d: new Audio(\"http://cd.textfiles.com/10000soundssongs/WAV/COWBELL1.WAV\")\n  },\n  bank2: {\n    q: new Audio(\"http://cd.textfiles.com/10000soundssongs/WAV/EERIE_1.WAV\"),\n    w: new Audio(\"http://www.denhaku.com/r_box/linn/congal.wav\"),\n    e: new Audio(\"http://electrongate.com/dmxfiles/conga.wav\"),\n    a: new Audio(\"http://dight310.byu.edu/media/audio/FreeLoops.com/4/4/Korg%20Ride%20Cymbal%202-2526-Free-Loops.com.mp3\"),\n    s: new Audio(\"http://electrongate.com/dmxfiles/DXCRASH.wav\"),\n    d: new Audio(\"http://cd.textfiles.com/10000soundssongs/WAV/COWBELL1.WAV\")\n  }\n}\n\nlet bank = true\nlet bankName = \"bank1\"\n\n\nfunction changeBank() {\n  if (bank){\n    bank = false\n  }  \n  else{ bank = true\n  }\n}\n\nfunction changeName() {\nreturn bank ? \"bank1\" :  \"bumhole\"\n\n}\n\ndocument.addEventListener(\"keydown\", keyPressed)\nfunction keyPressed(e) {\n\n  if (bank && audioSamples.bank1[e.key]) {\n    audioSamples.bank1[e.key].load()\n    audioSamples.bank1[e.key].play()\n    colorChange(e)\n  }\n  else if (audioSamples.bank2[e.key]) {\n    audioSamples.bank2[e.key].load()\n    audioSamples.bank2[e.key].play()\n    colorChange(e)\n  }\n\n  else if (e.key === \"p\") {\n    changeBank()\n    colorChange(e)\n  }\n}\n\nfunction colorChange(e) {\n  setTimeout(function () {\n    document.getElementById(e.key).style.color = null\n    document.getElementById(e.key).style.backgroundColor = null\n    document.getElementById(e.key).style.border = null\n    document.getElementById(e.key).style.background = null\n  }, 100);\n  document.getElementById(e.key).style.background = \"radial-gradient(white, purple)\";\n  document.getElementById(e.key).style.backgroundColor = \"red\"\n  \n\n}\n\nfunction handleClick(e) {\n  if (bank) {\n    audioSamples.bank1[e.target.id].load()\n    audioSamples.bank1[e.target.id].play()\n  }\n  else {\n    audioSamples.bank2[e.target.id].load()\n    audioSamples.bank2[e.target.id].play()\n  }\n}\n\nfunction App() {\n\n  return (\n    <div id=\"allButtons\">\n      <div id=\"DrumMachine\" className=\"Rows\"  >\n        <button id=\"q\" class=\"button\" onClick={handleClick} >Q</button>\n        <button id=\"w\" class=\"button\" onClick={handleClick} >W</button>\n        <button id=\"e\" class=\"button\" onClick={handleClick}>E</button>\n      </div>\n      <div className=\"Rows\"> <button id=\"a\" class=\"button\" onClick={handleClick}>A</button>\n        <button id=\"s\" class=\"button\" onClick={handleClick} >S</button>\n        <button id=\"d\" class=\"button\" onClick={handleClick} >D</button></div>\n      <div>\n        <button id=\"p\" class=\"bank\" onClick={changeBank}> P (Change Bank) </button></div>\n  <h1>{changeName()}</h1>\n    </div>\n    \n  );\n}\nexport default App;\n","import React from 'react';\r\n\r\n\r\nfunction Header() {\r\n  return (\r\n    <div id=\"Header\">\r\n      <h1>LJ Drum Machine</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Header from './Header'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}